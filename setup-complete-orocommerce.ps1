#!/usr/bin/env pwsh
# Script d'installation compl√®te OroCommerce pour nouveaux utilisateurs
# Usage: ./setup-complete-orocommerce.ps1

Write-Host "üöÄ Installation compl√®te OroCommerce avec donn√©es de d√©mo..." -ForegroundColor Green

# 1. V√©rifier que Minikube est d√©marr√©
Write-Host "üìã V√©rification de Minikube..." -ForegroundColor Yellow
$minikubeStatus = minikube status 2>$null
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Minikube n'est pas d√©marr√©. D√©marrage en cours..." -ForegroundColor Red
    minikube start --driver=docker --memory=4096 --cpus=2
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå √âchec du d√©marrage de Minikube" -ForegroundColor Red
        exit 1
    }
}
Write-Host "‚úÖ Minikube est actif" -ForegroundColor Green

# 2. Installer Helm si n√©cessaire
Write-Host "üìã V√©rification de Helm..." -ForegroundColor Yellow
$helmVersion = helm version --short 2>$null
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Helm non trouv√©. Veuillez installer Helm d'abord." -ForegroundColor Red
    Write-Host "Installation: https://helm.sh/docs/intro/install/" -ForegroundColor Blue
    exit 1
}
Write-Host "‚úÖ Helm est disponible: $helmVersion" -ForegroundColor Green

# 3. Nettoyer les anciennes installations (optionnel)
Write-Host "üßπ Nettoyage des anciennes installations..." -ForegroundColor Yellow
kubectl delete all --all 2>$null
kubectl delete pvc --all 2>$null
Write-Host "‚úÖ Nettoyage termin√©" -ForegroundColor Green

# 4. D√©ployer l'infrastructure
Write-Host "üîß D√©ploiement de l'infrastructure..." -ForegroundColor Yellow
helm upgrade --install postgresql ./charts/postgresql --wait --timeout=10m
Write-Host "‚úÖ Infrastructure d√©ploy√©e" -ForegroundColor Green

# 5. D√©ployer l'application principale
Write-Host "üéØ D√©ploiement de l'application OroCommerce..." -ForegroundColor Yellow
helm upgrade --install php-fpm-app ./charts/php-fpm-app --wait --timeout=15m
helm upgrade --install nginx ./charts/nginx --wait --timeout=10m
Write-Host "‚úÖ Application d√©ploy√©e" -ForegroundColor Green

# 6. Attendre que les pods soient pr√™ts
Write-Host "‚è≥ Attente que tous les pods soient pr√™ts..." -ForegroundColor Yellow
kubectl wait --for=condition=ready pod --all --timeout=300s
Write-Host "‚úÖ Tous les pods sont pr√™ts" -ForegroundColor Green

# 7. Installation et configuration OroCommerce
Write-Host "üîß Installation d'OroCommerce..." -ForegroundColor Yellow

# Attendre que PostgreSQL soit compl√®tement pr√™t
Write-Host "  üìã Attente de PostgreSQL..." -ForegroundColor Cyan
Start-Sleep -Seconds 30

# Installer l'extension uuid-ossp pour PostgreSQL
Write-Host "  üîå Installation de l'extension PostgreSQL..." -ForegroundColor Cyan
kubectl exec postgresql-0 -- psql -U oro_user -d oro_db -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";" 2>$null

# Installer OroCommerce avec sch√©ma et donn√©es de base
Write-Host "  üèóÔ∏è Installation du sch√©ma de base..." -ForegroundColor Cyan
kubectl exec deployment/php-fpm-app -- bash -c "cd /var/www/oro/orocommerce && php bin/console oro:install --env=prod --timeout=0 --application-url=http://localhost:8080 --organization-name='Demo Company' --user-name=admin --user-email=admin@example.com --user-firstname=Admin --user-lastname=User --user-password=admin --force" --timeout=600s

# Charger les donn√©es de d√©mo
Write-Host "  üì¶ Chargement des donn√©es de d√©mo..." -ForegroundColor Cyan
kubectl exec deployment/php-fpm-app -- bash -c "cd /var/www/oro/orocommerce && php bin/console oro:migration:data:load --fixtures-type=demo --env=prod --timeout=0" --timeout=600s

# Mettre √† jour le contenu de la page d'accueil
Write-Host "  üé® Configuration de la page d'accueil..." -ForegroundColor Cyan
kubectl exec deployment/php-fpm-app -- bash -c "cd /var/www/oro/orocommerce && php bin/console doctrine:query:sql 'UPDATE oro_cms_page SET content = (SELECT content FROM oro_cms_page WHERE id = 2), content_style = (SELECT content_style FROM oro_cms_page WHERE id = 2) WHERE id = 1' --env=prod"

# Corriger les permissions
Write-Host "  üîê Correction des permissions..." -ForegroundColor Cyan
kubectl exec deployment/php-fpm-app -- chown -R www-data:www-data /var/www/oro/orocommerce/var/

# R√©indexer la recherche
Write-Host "  üîç R√©indexation de la recherche..." -ForegroundColor Cyan
kubectl exec deployment/php-fpm-app -- bash -c "cd /var/www/oro/orocommerce && php bin/console oro:website-search:reindex --env=prod" --timeout=300s
kubectl exec deployment/php-fpm-app -- bash -c "cd /var/www/oro/orocommerce && php bin/console oro:search:reindex --env=prod" --timeout=300s

# Vider le cache
Write-Host "  üßπ Vidage du cache..." -ForegroundColor Cyan
kubectl exec deployment/php-fpm-app -- bash -c "cd /var/www/oro/orocommerce && php bin/console cache:clear --env=prod"
kubectl exec deployment/php-fpm-app -- bash -c "cd /var/www/oro/orocommerce && php bin/console cache:warmup --env=prod"

Write-Host "‚úÖ Installation d'OroCommerce termin√©e" -ForegroundColor Green

# 8. D√©ployer le monitoring (optionnel)
Write-Host "üìä D√©ploiement du monitoring..." -ForegroundColor Yellow
helm upgrade --install prometheus ./charts/prometheus --wait --timeout=10m
helm upgrade --install grafana ./charts/grafana --wait --timeout=10m
Write-Host "‚úÖ Monitoring d√©ploy√©" -ForegroundColor Green

# 9. Configuration du port-forwarding
Write-Host "üåê Configuration de l'acc√®s..." -ForegroundColor Yellow
Write-Host "üîó D√©marrage du port-forwarding..." -ForegroundColor Cyan
Write-Host "   Pour acc√©der √† l'application, ex√©cutez:" -ForegroundColor Blue
Write-Host "   kubectl port-forward service/nginx 8080:80" -ForegroundColor White
Write-Host "" -ForegroundColor White

# 10. R√©sum√© final
Write-Host "üéâ INSTALLATION TERMIN√âE AVEC SUCC√àS!" -ForegroundColor Green
Write-Host "" -ForegroundColor White
Write-Host "üìã R√©sum√© de l'installation:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ OroCommerce install√© avec donn√©es de d√©mo compl√®tes" -ForegroundColor White
Write-Host "   ‚Ä¢ 64 produits disponibles dans le catalogue" -ForegroundColor White
Write-Host "   ‚Ä¢ Page d'accueil configur√©e avec contenu RV" -ForegroundColor White
Write-Host "   ‚Ä¢ Utilisateur admin cr√©√© (admin/admin)" -ForegroundColor White
Write-Host "   ‚Ä¢ Monitoring Prometheus + Grafana d√©ploy√©" -ForegroundColor White
Write-Host "" -ForegroundColor White
Write-Host "üåê Acc√®s √† l'application:" -ForegroundColor Yellow
Write-Host "   1. Ex√©cutez: kubectl port-forward service/nginx 8080:80" -ForegroundColor White
Write-Host "   2. Ouvrez: http://localhost:8080" -ForegroundColor White
Write-Host "   3. Admin: http://localhost:8080/admin (admin/admin)" -ForegroundColor White
Write-Host "" -ForegroundColor White
Write-Host "üìä Monitoring:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Prometheus: kubectl port-forward service/prometheus 9090:9090" -ForegroundColor White
Write-Host "   ‚Ä¢ Grafana: kubectl port-forward service/grafana 3000:80" -ForegroundColor White
Write-Host "" -ForegroundColor White
Write-Host "üÜò En cas de probl√®me:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ V√©rifiez les pods: kubectl get pods" -ForegroundColor White
Write-Host "   ‚Ä¢ V√©rifiez les logs: kubectl logs deployment/php-fpm-app" -ForegroundColor White
Write-Host "   ‚Ä¢ Red√©marrez Minikube: minikube stop && minikube start" -ForegroundColor White
